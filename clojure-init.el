(require 'ac-nrepl)
(require 'clojure-mode)
(require 'lisp-init)

(defun set-auto-complete-as-completion-at-point-function ()
  (setq completion-at-point-functions '(auto-complete))) ; make autocomplete a completion-at-point function

(defun cam-clojure-mode-setup ()
  (cam-lisp-mode-setup)
  (subword-mode 1)      ; enable CamelCase support for editor movement
  (pretty-fn)
  (set-auto-complete-as-completion-at-point-function)
  (ac-nrepl-setup)
  (cljx/basic-init)) ; useful hacks to make clojure indent only with spaces, and save with a final newline.

(add-hook 'nrepl-mode-hook 'cam-clojure-mode-setup)
(add-hook 'nrepl-interaction-mode-hook 'cam-clojure-mode-setup)
(add-hook 'clojure-mode-hook 'cam-clojure-mode-setup)

;; custom keyboard shortcuts
(defun cam-define-clojure-keys (mode-map)
  (cam-define-lisp-keys mode-map)
  (define-keys mode-map
    '(("<f12> c" clojure-docs-search)
      ("<f12> i" instant-clojure-cheatsheet-search)
      ("<f12> j" javadocs-search)
      ("<f12> s" stackoverflow-search)
      ("<f12> <f12> p" paredit-cheatsheet)
      ("<f12> <f12> c" clojure-cheatsheet)
      ("<C-M-S-return>" toggle-test-file)
      ("S-<f9>" clojure-test-run-tests)
      ("C-c C-d" ac-nrepl-popup-doc)
      ("<C-M-return>" switch-to-nrepl-in-current-ns))))
(cam-define-clojure-keys clojure-mode-map)
(cam-define-clojure-keys nrepl-mode-map)
(cam-define-clojure-keys nrepl-interaction-mode-map)

;; custom keyboard shortcuts for NREPL only
(define-keys nrepl-mode-map
  '(("RET" nrepl-return)))

(defun cam-ac-nrepl-setup ()
    ; nothing right now
  )

(add-hook 'nrepl-mode-hook 'cam-ac-nrepl-setup)
(add-hook 'nrepl-interaction-mode-hook 'cam-ac-nrepl-setup)
(eval-after-load "auto-complete" '(add-to-list 'ac-modes 'nrepl-mode))
(eval-after-load "auto-complete" '(add-to-list 'ac-modes 'clojure-mode))
(add-hook 'auto-complete-mode-hook 'set-auto-complete-as-completion-at-point-function)

;; other custom hooks
(add-hook 'clojure-mode-hook 'clojure-test-mode)

;; custom vars
(setq nrepl-hide-special-buffers t) ; hide the *nrepl-connection* and *nrepl-server* buffers
;; (setq nrepl-popup-stacktraces nil) ; stop error buffer from popping up
;; (setq nrepl-popup-stacktraces-in-repl nil)
(setq nrepl-use-pretty-printing t)

(define-clojure-indent ; better indenting for compojure stuff
  (defroutes 'defun)
  (GET 2)
  (POST 2)
  (PUT 2)
  (DELETE 2)
  (HEAD 2)
  (ANY 2)
  (context 2))

(add-to-list 'auto-mode-alist '("\.cljs$" . clojure-mode)) ; ClojureScript Files should be edited in Clojure-mode

;; turns fn into a fancy f symbol. credit: emacs-starter-kit on github
(defun pretty-fn ()
  (font-lock-add-keywords
   nil `(("(\\(\\<fn\\>\\)"
	  (0 (progn (compose-region (match-beginning 1)
				    (match-end 1)
				    "\u0192"
				    'decompose-region)))))))

(defun nice-ns (namespace)
  (interactive)
  "Returns the path of the src file for the given test namespace."
  (let* ((namespace (clojure-underscores-for-hyphens namespace)))
    (concat (car (last (split-string namespace "\\."))) ".clj")))

(defun toggle-test-file ()
  (interactive)
  (if 
      (string= major-mode "nrepl-mode")
      (progn
	(switch-to-buffer-other-window (nice-ns (nrepl-current-ns)))
	(find-file (funcall clojure-test-for-fn (clojure-find-ns))))
    (progn
      (save-buffer)
      (clojure-jump-between-tests-and-code))))

(defun strip-clj-cljs (namespace-str)
  (interactive)
  "Strips clj. or cljs. from the beginning on a namespace string generated by clojure-mode's clojure-expeceted-ns "
  "function (e.g. when separating Clojure and ClojureScript source in Leiningen)"
  (cond
   ((string= "clj." (substring namespace-str 0 4)) (substring namespace-str 4))
   ((string= "cljs." (substring namespace-str 0 5)) (substring namespace-str 5))
   (t namespace-str)))

;;; get the environment set up
(defun switch-to-nrepl-in-current-ns ()
  (interactive)
  (if (string= major-mode "nrepl-mode")
      (switch-to-buffer-other-window (nice-ns (nrepl-current-ns)))
    (let ((ns (strip-clj-cljs (clojure-expected-ns))))
      (if (or (not (get-buffer "*nrepl*"))
	      (not (get-buffer (nrepl-current-connection-buffer))))
	  (progn
	    (nrepl-jack-in))
	(progn
	  (save-buffer)
	  (nrepl-load-current-buffer)
	  (switch-to-buffer-other-window "*nrepl*")
	  (nrepl-set-ns ns))))))

(defun paredit-cheatsheet ()
  (interactive)
  (browse-url "http://www.emacswiki.org/emacs/PareditCheatsheet"))

(defun clojure-cheatsheet ()
  (interactive)
  (browse-url "http://jafingerhut.github.com/cheatsheet-clj-1.3/cheatsheet-tiptip-no-cdocs-summary.html"))

(defun clojure-docs-search ()
  "Searches clojuredocs.org for a query or selected region if any."
  (interactive)
  (browse-url
   (concat
    "http://clojuredocs.org/search?x=0&y=0&q="
    (active-region-or-prompt "Search clojuredocs.org for: "))))

(defun javadocs-search ()
  "Searches javadocs.org for a query or selected region if any."
  (interactive)
  (browse-url
   (concat
    "http://javadocs.org/"
    (active-region-or-prompt "Search javadocs.org for: "))))

(defun instant-clojure-cheatsheet-search ()
  "Searches Instant Clojure Cheatsheet query or selected region if any."
  (interactive)
  (browse-url
   (concat
    "http://cammsaul.github.io/instant-clojure-cheatsheet/?"
    (active-region-or-prompt "Search Instant Clojure Cheatsheet for: "))))

(provide 'clojure-init)
